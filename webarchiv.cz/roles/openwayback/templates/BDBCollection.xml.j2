<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
       default-init-method="init">

<!--

    This file contains the default WaybackCollection implementation shipped
    with Wayback. It consists of a LocalResourceIndex using a BDBIndex, and
    uses several Worker Threads to implement automatic indexing.
    
    Several beans defined in this file reference the "resourcefilelocationdb"
    bean defined in wayback.xml.

    To customize where the automatic indexing system looks for ARC/WARC files,
    edit the "datadirs" list below.

    To customize the location where the automatic indexing state data is stored
    you can modify "wayback.basedir" in wayback.xml, or replace the properties
    in this file for further flexibility.

    For more information about the auto-indexing system, please see:

    http://archive-access.sourceforge.net/projects/wayback/resource_store.html

-->


  <!--
    This example looks for ARC/WARC files recursively under 2 directories:
      /tmp/wayback/files1 and /tmp/wayback/files2

    You can specify as few or as many ResourceFileSource instances
    as needed, but each must have a unique 'name' property.
  -->

  <bean id="datadirs" class="org.springframework.beans.factory.config.ListFactoryBean">
    <property name="sourceList">
      <list>
	{% for archive in openwayback_archive %}
        <bean class="org.archive.wayback.resourcestore.resourcefile.DirectoryResourceFileSource">
          <property name="name" value="{{ archive.name }}" />
          <property name="prefix" value="{{ archive.path }}" />
          <property name="recurse" value="{{ archive.recurse }}" />
        </bean>	
	{% endfor %}      

<!--
	<bean class="org.archive.wayback.resourcestore.resourcefile.DirectoryResourceFileSource">
          <property name="name" value="testCrawls" />
          <property name="prefix" value="/mnt/har-testCrawls/" />
          <property name="recurse" value="false" />
        </bean>
        <bean class="org.archive.wayback.resourcestore.resourcefile.DirectoryResourceFileSource">
          <property name="name" value="testCrawls-12" />
          <property name="prefix" value="/mnt/12-testCrawls/" />
          <property name="recurse" value="false" />
	</bean>
        <bean class="org.archive.wayback.resourcestore.resourcefile.DirectoryResourceFileSource">
          <property name="name" value="testCrawls-12-2013" />
          <property name="prefix" value="/mnt/12-2013-testCrawls/" />
          <property name="recurse" value="false" />
        </bean>
        <bean class="org.archive.wayback.resourcestore.resourcefile.DirectoryResourceFileSource">
          <property name="name" value="topics2013" />
          <property name="prefix" value="/mnt/2013-topics/" />
          <property name="recurse" value="true" />
	</bean>
	<bean class="org.archive.wayback.resourcestore.resourcefile.DirectoryResourceFileSource">
          <property name="name" value="topics2014" />
          <property name="prefix" value="/mnt/14/topics/" />
          <property name="recurse" value="true" />
	</bean>
        <bean class="org.archive.wayback.resourcestore.resourcefile.DirectoryResourceFileSource">
          <property name="name" value="topics2015" />
          <property name="prefix" value="/mnt/14/2015/topics/" />
          <property name="recurse" value="true" />
	</bean>
-->
      </list>
    </property>
  </bean>

<!--
    A LocalResourceIndex bean using a BDBIndex SearchResultSource.
-->
  <bean id="localbdbresourceindex" class="org.archive.wayback.resourceindex.LocalResourceIndex">
    <property name="canonicalizer" ref="waybackCanonicalizer" />
    <property name="source">
      <bean class="org.archive.wayback.resourceindex.bdb.BDBIndex">
        <property name="bdbName" value="DB1" />
        <property name="bdbPath" value="${wayback.basedir.curators}/index/" />
      </bean>
    </property>
    <property name="maxRecords" value="100000000" />
    <property name="dedupeRecords" value="true" />
  </bean>

<!--
    An IndexQueue implementation required for automatic indexing.
-->
  <bean id="indexqueue" class="org.archive.wayback.resourcestore.indexer.DirectoryIndexQueue">
    <property name="path" value="${wayback.basedir.curators}/index-data/queue" />
  </bean>

  <bean id="localbdbcollection" class="org.archive.wayback.webapp.WaybackCollection">

    <property name="resourceStore">
      <bean id="localresourcestore" class="org.archive.wayback.resourcestore.LocationDBResourceStore">
        <property name="db" ref="resourcefilelocationdbCurators" />
      </bean>
    </property>

    <property name="resourceIndex" ref="localbdbresourceindex"/>

    <property name="shutdownables">
      <list>
         <!-- This thread notices new files appearing in your resourcefilesources -->
         <bean id="resourcefilesourceupdater" class="org.archive.wayback.resourcestore.resourcefile.ResourceFileSourceUpdater">
          <property name="target" value="${wayback.basedir.curators}/file-db/incoming" />
          <property name="interval" value="100000" />
          <property name="sources" ref="datadirs" />
        </bean>
      
        <!-- This thread updates the location db with updates from resourcefilesourceupdater -->
        <bean id="resourcefilelocationdbupdater" class="org.archive.wayback.resourcestore.locationdb.ResourceFileLocationDBUpdater">
          <property name="interval" value="1000" />
          <property name="db" ref="resourcefilelocationdbCurators" />
          <property name="incomingDir" value="${wayback.basedir.curators}/file-db/incoming" />
          <property name="stateDir" value="${wayback.basedir.curators}/file-db/state" />
        </bean>
        
        <!-- This thread notices new files arriving in the filelocationdb, and queues them for indexing -->
        <bean id="indexqueueupdater" class="org.archive.wayback.resourcestore.indexer.IndexQueueUpdater">
          <property name="db" ref="resourcefilelocationdbCurators" />
          <property name="queue" ref="indexqueue" />
          <property name="interval" value="1000" />
          <property name="lastMark" value="${wayback.basedir.curators}/index-data/queue.mark" />
        </bean>
      
        <!-- This thread checks the to-be-indexed queue for files needing indexing, indexes them, and hands off the results for merging with the ResourceIndex -->
        <bean id="indexworker" class="org.archive.wayback.resourcestore.indexer.IndexWorker">
          <property name="db" ref="resourcefilelocationdbCurators" />
          <property name="queue" ref="indexqueue" />
          <property name="interval" value="1000" />
          <property name="target">
            <bean class="org.archive.wayback.resourceindex.updater.IndexClient">
              <property name="tmpDir" value="${wayback.basedir.curators}/index-data/tmp/" />
              <property name="target" value="${wayback.basedir.curators}/index-data/incoming/" />
            </bean>
          </property>
          <property name="canonicalizer" ref="waybackCanonicalizer"/>
        </bean>
        
        <!-- This thread merges updates from the indexworker into the ResourceIndex -->
        <bean class="org.archive.wayback.resourceindex.updater.LocalResourceIndexUpdater">

          <property name="index" ref="localbdbresourceindex" />
          <property name="incoming" value="${wayback.basedir.curators}/index-data/incoming/" />
          <property name="failed" value="${wayback.basedir.curators}/index-data/failed/" />
          <property name="merged" value="${wayback.basedir.curators}/index-data/merged/" />
          <property name="runInterval" value="1000" />
        </bean>
      </list>
    </property>
  </bean>


</beans>
